pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'your-username/your-flask-app'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
    }

    stages {
        stage('1. Install & Scan Dependencies') {
            // Run this stage inside a clean Python container
            agent { docker { image 'python:3.9-slim' } }
            steps {
                sh 'pip install --no-cache-dir -r requirements.txt'
                sh 'pip install pip-audit'
                echo 'Scanning dependencies for known vulnerabilities...'
                // Fails the build if vulnerabilities are found
                sh 'pip-audit'
            }
        }

        stage('2. Lint & Test') {
            agent { docker { image 'python:3.9-slim' } }
            steps {
                sh 'pip install pytest flake8'
                echo 'Linting code with Flake8...'
                sh 'flake8 . --count --show-source --statistics'
                echo 'Running unit tests with Pytest...'
                sh 'pytest tests/ --junitxml=test-reports.xml'
            }
        }

        stage('3. Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                    docker.build("${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}", ".")
                }
            }
        }

        stage('4. Scan Docker Image for Vulnerabilities') {
            // Use the official Trivy container to perform the scan
            agent { docker { image 'aquasec/trivy:latest' } }
            steps {
                echo "Scanning ${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} with Trivy..."
                // Fails the build if HIGH or CRITICAL vulnerabilities are found in the OS
                sh "trivy image --exit-code 1 --severity HIGH,CRITICAL ${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
            }
        }

        stage('5. Push and Deploy') {
            when { branch 'main' }
            steps {
                script {
                    // Push the now-verified image to the registry
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKER_CREDENTIALS_ID) {
                        docker.image("${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}").push()
                        docker.image("${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}").push('latest')
                    }
                    // Placeholder for your deployment script
                    echo "Deploying verified image ${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}..."
                }
            }
        }
    }

    post {
        always {
            junit 'test-reports.xml'
            cleanWs()
        }
    }
}